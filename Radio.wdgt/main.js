/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

var timer = 1;
var hideTime = unix_time();
//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
	$(document).stopTime();
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
	alert('hide()');
	hideTime = unix_time();
	$(document).stopTime();
    // Stop any timers to prevent CPU usage
	var back = document.getElementById("back");
	if(front.style.display!="block")
		showFront(null);
}

function unix_time() {
	return Math.ceil(new Date().getTime()/1000);
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
	alert('show()');
	var sleepTime = unix_time()-hideTime;
	alert(timer);
	alert(sleepTime);
	timer = timer - sleepTime;
	alert(timer);
	if( timer < 0) {
		update_song();
		update_upcomming();
	} else {
		$(document).everyTime(1000,'update_time()',update_time);
	}
}

function update_time() {
	if(--timer<=0) {
		alert('update_time()');
		$(document).stopTime('update_time()');
		update_song();
		update_upcomming();
		return;
	}
	
	var min = Math.floor(timer / 60);
	var sec = Math.floor(timer % 60);
	if(sec < 10) sec = '0'+sec;
	$('#duration').text(' '+min+':'+sec+' ');
}

function update_song() {
	alert('update_song()');
	system("/usr/bin/python Bin/playing.py",function(obj) {
		if(obj.status != 0) {
			$('#songinfo').text(obj.errorString);
			//Try again in 10 seconds
			$(document).oneTime(10000,'update_song()',update_song);
			return;
		}
		
		$('#songinfo').html(obj.outputString);
		timer = $('#timer').text();
		$(document).everyTime(1000,'update_time()',update_time);
	});
}

function update_upcomming() {
	alert('update_upcomming()');
	system("/usr/bin/python Bin/upcomming.py",function(obj) {
		if(obj.status != 0) {
			$('#upcoming_list').text(obj.outputString);
			return;
		}
		$('#upcoming_list').html(obj.outputString);
	});
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
	alert('showBack()');
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }
	
    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
	alert('showFront()');
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }
	
    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}

function system ( command, callback ) {
	if ( window.widget ) {
		widget.system(command, callback);
	}
}
